{"version":3,"file":"static/js/5565.d02340aa.chunk.js","mappings":"+GAAA,07I","sources":["../../../packages/authorized/README.md"],"sourcesContent":["export default \"# 权限组件\\n\\n[![npm version](https://img.shields.io/npm/v/@uiw-admin/authorized.svg?label=@uiw-admin/authorized)](https://www.npmjs.com/package/@uiw-admin/authorized)\\n\\n判断组件的权限\\n\\n## 何时使用\\n\\n当项目需要根据权限判断组件是否展示\\n使用组件时，请在 `.kktrc.js`文件中配置全局变量(`define`)中`AUTH=true`\\n\\n```diff\\nimport config from \\\"@uiw-admin/config\\\"\\nexport default config({\\n  define:{\\n+    AUTH:true,\\n    //  ...\\n  }\\n  //  ...\\n})\\n\\n```\\n\\n## 安装\\n\\n```bash\\nnpm i @uiw-admin/authorized --save # yarn add @uiw-admin/authorized\\n```\\n\\n## AuthPage\\n\\n> 可用于页面重定向\\n\\n### 参数说明\\n\\n| 参数         | 必填 | 类型          | 默认值   | 说明             |\\n| :----------- | :--- | :------------ | :------- | :--------------- |\\n| authority    | 否   | `boolean`     |          | 判断是否有权限展示内容    |\\n| redirectPath | 否   | `string`      | `/login` | 未登录重定向路径 |\\n| children     | 是   | `JSX.Element` |          | 是否已经登录     |\\n\\n```tsx\\n\\nimport AuthPage  from \\\"@uiw-admin/authorized\\\"\\nexport default ()=>{\\n  return <AuthPage authority={false} redirectPath=\\\"/login\\\">展示</AuthPage>\\n}\\n\\n```\\n\\n## getAuthPath\\n\\n> 判断是否有权限\\n\\n```ts\\ntype getAuthPath = (path?: string)=>boolean \\n\\nimport {getAuthPath}  from \\\"@uiw-admin/authorized\\\"\\n\\nconst isAuth = getAuthPath(\\\"/api/path\\\")\\n```\\n\\n## AuthBtn\\n\\n> 外层嵌套 组件，判断子组件是否有权限展示或使用\\n\\n### 参数说明\\n\\n| 参数     | 必填 | 类型              | 默认值  | 说明                                            |\\n| :------- | :--- | :---------------- | :------ | :---------------------------------------------- |\\n| path     | 否   | `string`          |         | 路径                                            |\\n| disabled | 否   | `boolean`         | `false` | 禁用 状态 展示(适用于 存在 disabled 属性的组件) |\\n| children | 是   | `React.ReactNode` |         | 内容                                            |\\n<!-- \\n```tsx\\nimport React from \\\"react\\\"\\nimport { AuthBtn } from \\\"@uiw-admin/authorized\\\"\\n\\nconst Demos = ()=>{\\n  return (\\n   <div>\\n     <AuthBtn path=\\\"/dom/save\\\" >\\n       子集渲染\\n     </AuthBtn>\\n     <AuthBtn path=\\\"/dom/edit\\\" disabled >\\n       子集渲染2\\n     </AuthBtn>\\n   </div>\\n  )\\n}\\nexport default Demos\\n``` -->\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\n\\nwindow.AUTH = true // 是否开启权限校验\\nwindow.STORAGE = \\\"session\\\" // 本地存储数据方式\\n// 上面这两种变量可以在`.kktrc.js`文件中配置全局变量(`define`)\\nsessionStorage.setItem('auth',JSON.stringify([\\\"/dom/save\\\",\\\"/dom/edit\\\"])) // 权限数据\\n// 以上数据只能为了能正常渲染设置的变量\\n\\nimport React from \\\"react\\\"\\nimport { AuthBtn } from \\\"@uiw-admin/authorized\\\"\\n\\nconst Demos = ()=>{\\n  return (\\n   <div>\\n     <AuthBtn path=\\\"/dom/save\\\" >\\n       子集渲染1\\n     </AuthBtn>\\n     <AuthBtn path=\\\"/dom/edit\\\" disabled >\\n       <button>子集渲染2</button>\\n     </AuthBtn>\\n      <AuthBtn path=\\\"/dom/edit1\\\" disabled >\\n       <button>子集渲染3</button>\\n     </AuthBtn>\\n      <AuthBtn path=\\\"/dom/edit1\\\"  >\\n       <button>子集渲染4</button>\\n     </AuthBtn>\\n   </div>\\n  )\\n}\\nReactDOM.render(<Demos />, _mount_);\\n```\\n\\n## 贡献者\\n\\n感谢所有的贡献者，欢迎开发者为开源项目贡献力量。\\n\\n<a href=\\\"https://github.com/uiwjs/uiw-admin/graphs/contributors\\\">\\n  <img src=\\\"https://uiwjs.github.io/uiw-admin/CONTRIBUTORS.svg\\\" />\\n</a>\\n\\n## License\\n\\nLicensed under the MIT License.\";"],"names":[],"sourceRoot":""}