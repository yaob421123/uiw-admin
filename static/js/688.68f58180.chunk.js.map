{"version":3,"file":"static/js/688.68f58180.chunk.js","mappings":"+GAAA,g76B","sources":["../../../packages/components/src/ProTable/README.md"],"sourcesContent":["export default \"## ProTable\\n\\n集成搜索表单的Table组件，用于一般页面的查询搜索。解决业务中**查询条件+Table**的样板代码问题。 **依赖于uiw v4.10.7以上版本**\\n\\n## 何时使用\\n\\n当你的表格需要与服务端进行交互，又或者表格有查询条件时使用\\n\\n### 基础用例\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport { ProTable, useTable } from '@uiw-admin/components';\\n\\nfunction Demo1() {\\n  const table = useTable('https://randomuser.me/api', {\\n    // 格式化接口返回的数据，必须返回{total 总数, data: 列表数据}的格式\\n    formatData: (data) => {\\n      return {\\n        total: 100,\\n        data: data.results,\\n      };\\n    },\\n    // 格式化查询参数 会接收到pageIndex 当前页  searchValues 表单数据\\n    query: (pageIndex, pageSize, searchValues) => {\\n      return {\\n        page: pageIndex,\\n        results: pageSize,\\n        ...searchValues,\\n      }\\n    },\\n    requestOptions: {method: 'GET'}\\n  });\\n\\n  return (\\n    <ProTable\\n       // 搜索栏按钮\\n      searchBtns={[\\n        {\\n          label: '搜索',\\n          type: 'primary',\\n          onClick: () => {\\n            table.onSearch()\\n          },\\n        },\\n        {\\n          label: '重置',\\n          onClick: () => {\\n            table.onReset()\\n          },\\n        },\\n      ]}\\n      paginationProps={{\\n        pageSizeOptions: [10,20,30],\\n        pageSize: 10,\\n      }}\\n      table={table}\\n      columns={[\\n        {\\n          title: '名字',\\n          key: 'name',\\n          props: {\\n            widget: 'input',\\n            initialValue: '',\\n            widgetProps: {\\n              preIcon: 'user',\\n              placeholder: '输入用户名',\\n            },\\n          },\\n          render: (text) => {\\n            return <div>{text.title}.{text.first}{text.last}</div>\\n          }\\n        },\\n        {\\n          title: '年龄',\\n          key: 'registered',\\n          props: {\\n            widget: 'select',\\n            key: 'age',\\n            option: [\\n              { label: '20', value: 20 },\\n              { label: '10', value: 10 },\\n            ],\\n          },\\n          render: (text) => {\\n            return <div>{text.age}</div>\\n          }\\n        },\\n        {\\n          title: '手机号',\\n          key: 'phone',\\n        },\\n        {\\n          title: '性别',\\n          key: 'gender',\\n          props: {\\n            widget: 'select',\\n            option: [\\n              { label: 'female', value: 'female' },\\n              { label: 'male', value: 'male' },\\n            ],\\n          },\\n        },\\n      ]}\\n    />\\n  );\\n}\\n\\nReactDOM.render(<Demo1 />, _mount_);\\n\\n```\\n\\n> 表单根据columns配置的key作为唯一值，如果配置表单props里面不写key，则继承columns列key\\n\\n```jsx\\n<ProTable\\n  columns={[\\n    // input key 继承 column的key name\\n    {\\n      title: '名字',\\n      key: 'name',\\n      props: {\\n        widget: 'input',\\n        initialValue: '',\\n        widgetProps: {\\n          preIcon: 'user',\\n          placeholder: '输入用户名',\\n        },\\n      },\\n    },\\n    // 自定义表单key\\n    {\\n      title: '年龄',\\n      key: 'registered',\\n      props: {\\n        widget: 'select',\\n        key: 'age',\\n        option: [\\n          { label: '20', value: 20 },\\n          { label: '10', value: 10 },\\n        ],\\n      },\\n    },\\n  ]}\\n\\n\\n/>\\n\\n```\\n\\n### 显示操作栏\\n\\n> 操作栏区域默认是`Button`按钮，可通过`render`自定义\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport { ProTable, useTable } from '@uiw-admin/components';\\nimport { Dropdown, Menu, ButtonGroup, Button, Divider, Icon } from 'uiw';\\n\\nconst menu = (\\n  <div>\\n    <Menu bordered style={{ minWidth: 120 }}>\\n      <Menu.Item icon=\\\"reload\\\" text=\\\"重新加载\\\" />\\n      <Menu.Item icon=\\\"heart-on\\\" text=\\\"另存为\\\" active />\\n      <Menu.Item icon=\\\"appstore\\\" text=\\\"应用商城\\\" />\\n      <Menu.Item icon=\\\"bar-chart\\\" text=\\\"月统计报表\\\" />\\n      <Menu.Item icon=\\\"setting\\\" text=\\\"偏好设置\\\" />\\n    </Menu>\\n  </div>\\n);\\n\\nfunction Demo2() {\\nconst table = useTable('https://randomuser.me/api', {\\n    formatData: (data) => {\\n      return {\\n        total: 100,\\n        data: data.results,\\n      };\\n    },\\n    query: (pageIndex, pageSize, searchValues) => {\\n      return {\\n        page: pageIndex,\\n        results: pageSize,\\n        pageSize: 10,\\n        ...searchValues,\\n      }\\n    },\\n    requestOptions: {method: 'GET'}\\n  });\\n\\n  return (\\n    <ProTable\\n      // 操作栏按钮\\n      operateButtons={[\\n        { label: '自定义查询', type: 'primary',  style: {marginRight: 10} },\\n        {\\n          \\n          render: <Dropdown trigger=\\\"click\\\" menu={menu} >\\n                    <a href='#' onClick={e => e.preventDefault()}>\\n                      点击我出现下拉菜单 <Icon type=\\\"down\\\" />\\n                    </a>\\n                  </Dropdown>\\n        },\\n      ]} \\n      table={table}\\n      columns={[\\n        {\\n          title: '名字',\\n          key: 'name',\\n          props: {\\n            widget: 'input',\\n            initialValue: '',\\n            widgetProps: {\\n              preIcon: 'user',\\n              placeholder: '输入用户名',\\n            },\\n          },\\n          render: (text) => {\\n            return <div>{text.title}.{text.first}{text.last}</div>\\n          }\\n        },\\n        {\\n          title: '年龄',\\n          key: 'registered',\\n          props: {\\n            widget: 'select',\\n            key: 'age',\\n            option: [\\n              { label: '20', value: 20 },\\n              { label: '10', value: 10 },\\n            ],\\n          },\\n          render: (text) => {\\n            return <div>{text.age}</div>\\n          }\\n        },\\n        {\\n          title: '手机号',\\n          key: 'phone',\\n        },\\n        {\\n          title: '性别',\\n          key: 'gender',\\n          props: {\\n            widget: 'select',\\n            option: [\\n              { label: 'female', value: 'female' },\\n              { label: 'male', value: 'male' },\\n            ],\\n          },\\n        },\\n      ]}\\n    />\\n  );\\n}\\n\\nReactDOM.render(<Demo2 />, _mount_);\\n\\n```\\n\\n### table多选、单选行\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React, { useState } from 'react';\\nimport { ProTable, useTable } from '@uiw-admin/components';\\n\\nfunction Demo3() {\\n\\nconst [isSingle, SetInSingle] = useState(false)\\n\\nconst table = useTable('https://randomuser.me/api', {\\n    formatData: (data) => {\\n      return {\\n        total: 10,\\n        data: data.results,\\n      };\\n    },\\n    query: (pageIndex, pageSize, searchValues) => {\\n      return {\\n        page: pageIndex,\\n        results: pageSize,\\n        pageSize: 10,\\n        ...searchValues,\\n      }\\n    },\\n    requestOptions: {method: 'GET'}\\n  });\\n\\n  return (\\n    <>\\n      <div style={{whiteSpace: 'break-spaces'}}>选中的值{JSON.stringify(table && table.selection.selected)}</div>\\n      <ProTable\\n        // 操作栏按钮\\n        operateButtons={[\\n          { label: '全选', type: 'primary', onClick: () => { table.selection.selectAll() }  },\\n          { label: '取消全选', type: 'primary', onClick: () => { table.selection.unSelectAll() }   },\\n          { label: '切换', type: 'primary', onClick: () => { table.selection.toggleAll() }   },\\n          { label: '单选多选切换', type: 'primary', onClick: () => {\\n            table.selection.unSelectAll()\\n            SetInSingle(!isSingle)\\n          }},\\n        ]}\\n        table={table}\\n        rowSelection={{\\n          // 多选 checkbox 单选radio\\n          type: isSingle ? 'radio' : 'checkbox',\\n          // 选中的键名 column里的key\\n          selectKey: 'name',\\n          // 默认值\\n          defaultSelected: [],\\n        }}\\n          // 取消全部选择\\n        onPageChange={() => {\\n          table.selection.unSelectAll()\\n        }}\\n        columns={[\\n          {\\n            title: '名字',\\n            key: 'name',\\n            props: {\\n              widget: 'input',\\n              initialValue: '',\\n              widgetProps: {\\n                preIcon: 'user',\\n                placeholder: '输入用户名',\\n              },\\n            },\\n            render: (text) => {\\n              return <div>{text.title}.{text.first}{text.last}</div>\\n            }\\n          },\\n        ]}\\n      />\\n    </>\\n  );\\n}\\n\\nReactDOM.render(<Demo3 />, _mount_);\\n\\n```\\n\\n### table表单验证\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport { ProTable, useTable } from '@uiw-admin/components';\\n\\nfunction Demo4() {\\n  const table = useTable('https://randomuser.me/api', {\\n    // 格式化接口返回的数据，必须返回{total 总数, data: 列表数据}的格式\\n    formatData: (data) => {\\n      return {\\n        total: 100,\\n        data: data.results,\\n      };\\n    },\\n    // 格式化查询参数 会接收到pageIndex 当前页  searchValues 表单数据\\n    query: (pageIndex, pageSize, searchValues) => {\\n      return {\\n        page: pageIndex,\\n        results: pageSize,\\n        ...searchValues,\\n      }\\n    },\\n    requestOptions: {method: 'GET'}\\n  });\\n\\n  return (\\n    <ProTable\\n       // 搜索栏按钮\\n      searchBtns={[\\n        {\\n          label: '搜索',\\n          type: 'primary',\\n          onClick: () => {\\n            table.onSearch()\\n          },\\n        },\\n        {\\n          label: '重置',\\n          onClick: () => {\\n            table.onReset()\\n          },\\n        },\\n      ]}\\n      onBeforeSearch={({ initial, current }) => {\\n        const errorObj = {};\\n        if (!current.name) errorObj.name = '名字不能为空！';\\n        if (!current.age) errorObj.age = '年龄不能为空！';\\n        if (!current.gender) errorObj.gender = '性别不能为空！';\\n        if (Object.keys(errorObj).length > 0) {\\n          const err = new Error();\\n          err.filed = errorObj;\\n          throw err;\\n        }\\n        return true;\\n      }}\\n      paginationProps={{\\n        pageSizeOptions: [10,20,30],\\n        pageSize: 10,\\n      }}\\n      table={table}\\n      columns={[\\n        {\\n          title: '名字',\\n          key: 'name',\\n          props: {\\n            widget: 'input',\\n            initialValue: '',\\n            widgetProps: {\\n              preIcon: 'user',\\n              placeholder: '输入用户名',\\n            },\\n          },\\n          render: (text) => {\\n            return <div>{text.title}.{text.first}{text.last}</div>\\n          }\\n        },\\n        {\\n          title: '年龄',\\n          key: 'registered',\\n          props: {\\n            widget: 'select',\\n            key: 'age',\\n            option: [\\n              { label: '20', value: 20 },\\n              { label: '10', value: 10 },\\n            ],\\n          },\\n          render: (text) => {\\n            return <div>{text.age}</div>\\n          }\\n        },\\n        {\\n          title: '手机号',\\n          key: 'phone',\\n        },\\n        {\\n          title: '性别',\\n          key: 'gender',\\n          props: {\\n            widget: 'select',\\n            option: [\\n              { label: 'female', value: 'female' },\\n              { label: 'male', value: 'male' },\\n            ],\\n          },\\n        },\\n      ]}\\n    />\\n  );\\n}\\n\\nReactDOM.render(<Demo4 />, _mount_);\\n\\n```\\n\\n### 表头分组\\n\\n与uiw table使用方法一致，可通过传props配置统一的表单\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport { ProTable, useTable } from '@uiw-admin/components';\\n\\nfunction Demo5() {\\n  const table = useTable('https://randomuser.me/api', {\\n    // 格式化接口返回的数据，必须返回{total 总数, data: 列表数据}的格式\\n    formatData: (data) => {\\n      data.results = data.results.map(res => ({\\n        ...res,\\n        city: res.location.city,\\n        country: res.location.country,\\n      }))\\n      return {\\n        total: 100,\\n        data: data.results,\\n      };\\n    },\\n    // 格式化查询参数 会接收到pageIndex 当前页  searchValues 表单数据\\n    query: (pageIndex, pageSize, searchValues) => {\\n      return {\\n        page: pageIndex,\\n        results: pageSize,\\n        ...searchValues,\\n      }\\n    },\\n    requestOptions: {method: 'GET'}\\n  });\\n  console.log(table)\\n  return (\\n    <ProTable\\n       // 搜索栏按钮\\n      searchBtns={[\\n        {\\n          label: '搜索',\\n          type: 'primary',\\n          onClick: () => {\\n            table.onSearch()\\n          },\\n        },\\n        {\\n          label: '重置',\\n          onClick: () => {\\n            table.onReset()\\n          },\\n        },\\n      ]}\\n     \\n      paginationProps={{\\n        pageSizeOptions: [10,20,30],\\n        pageSize: 10,\\n      }}\\n      table={table}\\n      columns={[\\n        {\\n          title: '名字',\\n          key: 'name',\\n          width: 100,\\n          props: {\\n            widget: 'input',\\n            initialValue: '',\\n            widgetProps: {\\n              preIcon: 'user',\\n              placeholder: '输入用户名',\\n            },\\n          },\\n          render: (text) => {\\n            return <div>{text.title}.{text.first}{text.last}</div>\\n          }\\n        },\\n        {\\n          title: '年龄',\\n          key: 'registered',\\n          width: 100,\\n          props: {\\n            widget: 'select',\\n            key: 'age',\\n            option: [\\n              { label: '20', value: 20 },\\n              { label: '10', value: 10 },\\n            ],\\n          },\\n          render: (text) => {\\n            return <div>{text.age}</div>\\n          }\\n        },\\n        {\\n          title: '区域',\\n          key: 'location',\\n          children: [{\\n            title: '城市',\\n            key: 'city',\\n            props: {\\n            widget: 'input',\\n            initialValue: '',\\n            widgetProps: {\\n              placeholder: '输入国家',\\n            },\\n          },\\n            \\n          }, {\\n            title: '国家',\\n            key: 'country',\\n          }]\\n        }\\n      ]}\\n    />\\n  );\\n}\\n\\nReactDOM.render(<Demo5 />, _mount_);\\n\\n```\\n\\n### 自定义表单列\\n\\n默认是一行五个，可自定义\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport { ProTable, useTable } from '@uiw-admin/components';\\n\\nfunction Demo6() {\\n  const table = useTable('https://randomuser.me/api', {\\n    // 格式化接口返回的数据，必须返回{total 总数, data: 列表数据}的格式\\n    formatData: (data) => {\\n      return {\\n        total: 100,\\n        data: data.results,\\n      };\\n    },\\n    // 格式化查询参数 会接收到pageIndex 当前页  searchValues 表单数据\\n    query: (pageIndex, pageSize, searchValues) => {\\n      return {\\n        page: pageIndex,\\n        results: pageSize,\\n        ...searchValues,\\n      }\\n    },\\n    requestOptions: {method: 'GET'}\\n  });\\n\\n  return (\\n    <ProTable\\n      formCol={2}\\n       // 搜索栏按钮\\n      searchBtns={[\\n        {\\n          label: '搜索',\\n          type: 'primary',\\n          onClick: () => {\\n            table.onSearch()\\n          },\\n        },\\n        {\\n          label: '重置',\\n          onClick: () => {\\n            table.onReset()\\n          },\\n        },\\n      ]}\\n      paginationProps={{\\n        pageSizeOptions: [10,20,30],\\n        pageSize: 10,\\n      }}\\n      table={table}\\n      columns={[\\n        {\\n          title: '名字',\\n          key: 'name',\\n          props: {\\n            widget: 'input',\\n            initialValue: '',\\n            widgetProps: {\\n              preIcon: 'user',\\n              placeholder: '输入用户名',\\n            },\\n          },\\n          render: (text) => {\\n            return <div>{text.title}.{text.first}{text.last}</div>\\n          }\\n        },\\n        {\\n          title: '年龄',\\n          key: 'registered',\\n          props: {\\n            widget: 'select',\\n            key: 'age',\\n            option: [\\n              { label: '20', value: 20 },\\n              { label: '10', value: 10 },\\n            ],\\n          },\\n          render: (text) => {\\n            return <div>{text.age}</div>\\n          }\\n        },\\n        {\\n          title: '手机号',\\n          key: 'phone',\\n        },\\n        {\\n          title: '性别',\\n          key: 'gender',\\n          props: {\\n            widget: 'select',\\n            option: [\\n              { label: 'female', value: 'female' },\\n              { label: 'male', value: 'male' },\\n            ],\\n          },\\n        },\\n      ]}\\n    />\\n  );\\n}\\n\\nReactDOM.render(<Demo6 />, _mount_);\\n\\n```\\n\\n## Props\\n\\n| 参数           | 说明                                                   | 类型                                            | 默认值 |\\n| -------------- | ------------------------------------------------------ | ----------------------------------------------- | ------ |\\n| columns        | 与`uiw table` colunms用法一致 必传, 如果需要表单，也在此增加`props`                     | FormCol[]                                       | []     |\\n| operateButtons | 操作栏按钮集合，属性与uiw button一致并支持自定义render | `Array<ButtonProps & { render?: JSX.Element }>` | []     |\\n| searchBtns     | 搜索栏按钮集合，属性与uiw button一致并支持自定义render | `Array<ButtonProps & { render?: JSX.Element }>` | []     |\\n| table          | useTable返回值                                    | Object 必传                                     |        |\\n| onPageChange   | 分页回调             |（page: number） => void                        | -      |\\n| onBeforeSearch | 查询table前表单回调，可用于表单验证，返回true 继续查询 | ({initial, current}) => Boolean                 |        |\\n| rowSelection   | 选择框配置                                        | RowSelection                                    | -      |\\n| scroll         | 设置横向滚动                                      | ScrollProps        | -      |\\n| paginationProps| 分页属性                                          | 继承自[uiw Pagination](https://uiwjs.github.io/#/components/pagination)        | -      |\\n| formCol        | 网格中表单一行列数                                 | number    | 5      |\\n| tableBackgroundColor        | 网格中表格的背景色                                 | React.CSSProperties['backgroundColor']    | -      |\\n| tableHeadHidden        | 网格中表头是否显示                               | boolean    | false      |\\n \\n\\n### searchBtns\\n\\n| 参数            | 说明                                     | 类型     | 默认值 |\\n| --------------- | ---------------------------------------- | -------- | ------ |\\n| label           | 按钮标题                               | string   | - |\\n| render          | 不使用button，自定义组件                               | React Component   | - |\\n\\n其余属性继承[uiw button](https://uiwjs.github.io/#/components/button)\\n\\n### operateButtons\\n\\n与`searchBtns`参数一致\\n\\n### rowSelection\\n\\n| 参数            | 说明                                     | 类型     | 默认值 |\\n| --------------- | ---------------------------------------- | -------- | ------ |\\n| checkbox        | 选择框类型                               | checkbox | radio  | checkbox |\\n| selectKey       | 选择框的键名，必填,对应的column里的key。 | String   | -      |\\n| defaultSelected | 选中默认值                               | []       | -      |\\n\\n### ScrollProps\\n\\n| 参数 | 说明    | 类型             | 默认值 |\\n| ---- | ------- | ---------------- | ------ |\\n| x    | x轴宽度 | string 或 number | -      |\\n\\n其余属性与uiw Table一致\\n\\n### columns  props\\n\\n配置搜索表单\\n\\n| 参数        | 说明                                  | 类型                                                            | 默认值 |\\n| ----------- | ------------------------------------- | --------------------------------------------------------------- | ------ |\\n| widget      | 表单组件                              | 支持例子中的组件, 组件名与uiw表单组件名字一致，只是首字母小写了 | -      |\\n| widgetProps | 组件属性                              | 与uiw对应的组件属性一致                                         | -      |\\n| label       | 表单标题，如果不填则继承columns title | String                                                          | -      |\\n| key         | 表单name，如果不填则继承columns key   | String       | -      |\\n| option      | 组件 是`checkbox`、`select`、`searchSelect`、`searchTree` 使用， 数据源统一叫option   | Array       | -      |\\n\\n当前支持的widget组件有\\n\\n```\\n\\ninput\\nradio,\\ncheckbox,\\nswitch,\\nselect,\\nsearchSelect,\\ntextarea,\\ndateInput,\\ntimePicker,\\nmonthPicker\\nsearchTree,\\ndateInputRange\\n```\\n\\n props可以是个对象属性值是以上参数，也可以是个数组方便处理筛选条件大于列表展示的情况\\n\\n```js\\n<!-- 对象 -->\\nprops: {\\n  widget: 'input',\\n  initialValue: 'zzz',\\n  widgetProps: {\\n    preIcon: 'user',\\n    placeholder: '输入用户名',\\n  }\\n}\\n\\n  <!-- 数组 -->\\nprops: [\\n  {\\n    widget: 'input',\\n    initialValue: 'zzz',\\n    key: 'name'\\n  },\\n  {\\n    widget: 'input',\\n    initialValue: 'a',\\n  },\\n],\\n\\n```\\n\\n### paginationProps\\n\\n| 参数    | 说明         | 类型   | 默认值 |\\n| ------- | ------------ | ------ | ------ |\\n| pageSizeOptions | 指定每页可以显示多少条      | Number[]  | {}     |\\n| pageSize | 每页条数       | Number | 10     |\\n| onShowSizeChange     | pageSize 变化的回调  | Function(current, pageSize)  | -      |\\n\\n其余属性继承自[uiw Pagination](https://uiwjs.github.io/#/components/pagination)\\n\\n## useTable\\n\\n### params\\n\\n| 参数    | 说明         | 类型   | 默认值 |\\n| ------- | ------------ | ------ | ------ |\\n| api     | 接口请求地址 | string | -      |\\n| options | 配置集合     | object | {}     |\\n\\n### options\\n\\n| 参数             | 说明                                                              | 类型                                                                                     | 默认值                     |\\n| ---------------- | ----------------------------------------------------------------- | ---------------------------------------------------------------------------------------- | -------------------------- |\\n| formatData       | 格式化接口返回的数据，必须返回{total: 总数, data: 列表数据}的格式 | (data) => {total: 10, data: []}                                                          | -                          |\\n| query            | 格式化请求参数, 会接收到pageIndex 当前页  searchValues 表单数据   | (pageIndex: number, searchValues: any) => {page:  pageIndex, pageSize: 10, searchValues} | {}                         |\\n| SWRConfiguration | swr配置                                                           | SWRConfiguration                                                                         | {revalidateOnFocus: false} |\\n| requestOptions | request参数，继承自[axios config](https://axios-http.com/docs/req_config)     | object | {}     |\\n\\n### response\\n\\n| 参数         | 说明         | 类型          | 默认值 |\\n| ------------ | ------------ | ------------- | ------ |\\n| data         | 接口请求数据 | Array         | -      |\\n| total        | 数据总数     | Number        | -      |\\n| searchValues | 表单值       | Object        | -      |\\n| selection    | 选择框属性   | UseSelections | -      |\\n| pageIndex    | 当前分页     | Number        | 1      |\\n| onRefersh    | 刷新分页数据  | () => void        | -      |\\n| onReset      | 重置表单，查询数据  | () => void         | -      |\\n| onSearch     | 查询数据             | () => void         | -     |\\n| form     | 返回搜索表单form实例各种内部函数,可用于主动触发事件, 与[Uiw Form](https://uiwjs.github.io/#/components/form) ref 属性返回的一致              | Ref         | -     |\\n\\n### selection\\n\\n| 参数              | 说明               | 类型                  | 默认值 |\\n| ----------------- | ------------------ | --------------------- | ------ |\\n| selected          | 已经选择的元素     | array                 | -      |\\n| allSelected       | 是否全选           | boolean               | -      |\\n| noneSelected      | 是否一个都没有选择 | boolean               | -      |\\n| partiallySelected | 是否半选           | boolean               | -      |\\n| isSelected        | 是否被选择         | (value: T) => boolean | -      |\\n| setSelected       | 设置选择的元素     | (value: T[]) => void  | -      |\\n| select            | 选择元素           | (value: T) => void    | -      |\\n| unSelect          | 取消选择元素       | (value: T) => void    | -      |\\n| toggle            | 反选元素           | (value: T) => void    | -      |\\n| selectAll         | 选择全部元素       | () => void            | -      |\\n| unSelectAll       | 取消选择全部元素   | () => void            | -      |\\n| toggleAll         | 反选全部元素       | () => void            | -      |\\n\\n## 贡献者\\n\\n感谢所有的贡献者，欢迎开发者为开源项目贡献力量。\\n\\n<a href=\\\"https://github.com/uiwjs/uiw-admin/graphs/contributors\\\">\\n  <img src=\\\"https://uiwjs.github.io/uiw-admin/CONTRIBUTORS.svg\\\" />\\n</a>\\n\\n## License\\n\\nLicensed under the MIT License.\\n\";"],"names":[],"sourceRoot":""}