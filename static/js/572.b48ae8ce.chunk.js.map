{"version":3,"file":"static/js/572.b48ae8ce.chunk.js","mappings":"+GAAA,i9I","sources":["../../../packages/models/README.md"],"sourcesContent":["export default \"# 整合 models 数据流\\n\\n  1. 简化 @rematch/* 状态管理公共进行初始化;\\n  2. 约定是到 model 组织方式，不用手动注册 model\\n  3. 文件名即 name，model 内如果没有声明 name，会以文件名作为 name\\n  4. 内置 @rematch/loading，直接 loading 字段使用即可\\n  5. [更多 @rematch/core api](https://rematchjs.org/docs/api-reference)\\n\\n## 安装\\n\\n```bash\\nnpm i @uiw-admin/models --save\\n```\\n\\n## store  \\n\\n> 由 @rematch/core 的 init 初始化生成的状态存储\\n\\n## dispatch\\n\\n> 更新状态方法\\n\\n\\n## 约定式的 model 组织方式\\n\\n符合以下规则的文件会被认为是 model 文件，\\n\\n  1. src/models 下的文件\\n  2. src/pages 下，子目录中 models 目录下的文件\\n  3. src/pages 下，子目录中 models.ts 文件\\n\\n```txt\\n\\nsrc\\n  models/a.ts\\n  pages\\n    foo/models/b.ts\\n    test/models.ts\\n\\n```\\n\\n## model 校验\\n\\n```ts\\nimport { createModel } from '@rematch/core'\\nimport { RootModel ，ModelDefault} from '@uiw-admin/models'\\n\\n//------- createModel 方式 ------ \\n// 通过\\nexport default createModel()({name:\\\"foo\\\"})\\nexport default createModel()({reducers:\\\"foo\\\"})\\n\\n// ts 类型方式 通过\\nexport default createModel<RootModel>()({name:\\\"foo\\\"})\\nexport default createModel<RootModel>()({reducers:\\\"foo\\\"})\\n\\n// 通过\\nconst models = createModel()({reducers:\\\"foo\\\"})\\nexport default models\\n\\n\\n//----- 直接一个对象的方式 ---- 不建议使用 ------\\n\\n// 通过\\nexport default { name: 'foo' };\\nexport default { reducers: 'foo' };\\n\\n// 通过\\nconst model = { name: 'foo' };\\nexport default model;\\n\\n// ts 类型方式 通过\\nconst model: ModelDefault = { name: 'foo' };\\nexport default model;\\n\\n```\\n\\n\\n## 类型\\n\\n通过 @uiw-admin/models 导出类型：`FullModel`，`Store`，`AddModel`，`Dispatch`，`RootState`，`ModelDefault`，`RootModel`。\\n\\n## model 用例\\n\\n```ts\\nimport { RootModel } from '@uiw-admin/models'\\nimport { createModel } from '@rematch/core'\\nimport { selectById } from '../servers/demo'\\n\\nconst demo = createModel<RootModel>()({\\n  name: 'demo',\\n  state: {\\n    drawerVisible: false,\\n    tableType: '',\\n    queryInfo: {},\\n    isView: false,\\n  },\\n  reducers: {\\n    updateState: (state: any, payload: any) => ({\\n      ...state,\\n      ...payload,\\n    }),\\n  },\\n  effects: (dispatch) => ({\\n    async selectById(payload: any) {\\n      const dph = dispatch\\n      const data = await selectById(payload)\\n      if (data.code === 200) {\\n        dph.demo.updateState({\\n          drawerVisible: true,\\n          queryInfo: data.data || {},\\n        })\\n      }\\n    },\\n    clean() {\\n      const dph = dispatch\\n      dph.demo.updateState({\\n        drawerVisible: false,\\n        tableType: '',\\n        queryInfo: {},\\n        isView: false,\\n      })\\n    },\\n  }),\\n})\\nexport default demo\\n\\n\\n```\\n\\n\\n## page 用例\\n\\n```tsx\\nimport React from 'react'\\nimport { useDispatch,useSelector } from 'react-redux'\\nimport { Dispatch } from '@uiw-admin/models'\\nimport { RootState } from '@uiw-admin/models'\\n\\nconst Demo = () => {\\n  const dispatch = useDispatch<Dispatch>()\\n  // 获取 models 中所有的状态\\n  const store = useSelector( (state: RootState) => state )\\n  const updateData = (payload: any) => {\\n    dispatch({\\n      type: 'demo/updateState',\\n      payload,\\n    })\\n    dispatch.demo.updateState({ a: 1 })\\n  }\\n  return (\\n    <React.Fragment>\\n      <button onClick={()=>updateData({c:12})} >点击</button>\\n    </React.Fragment>\\n  )\\n}\\nexport default Demo\\n\\n```\\n\\n## 贡献者\\n\\n感谢所有的贡献者，欢迎开发者为开源项目贡献力量。\\n\\n<a href=\\\"https://github.com/uiwjs/uiw-admin/graphs/contributors\\\">\\n  <img src=\\\"https://uiwjs.github.io/uiw-admin/CONTRIBUTORS.svg\\\" />\\n</a>\\n\\n## License\\n\\nLicensed under the MIT License.\\n\";"],"names":[],"sourceRoot":""}