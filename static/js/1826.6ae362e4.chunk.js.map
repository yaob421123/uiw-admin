{"version":3,"file":"static/js/1826.6ae362e4.chunk.js","mappings":"gHAAA,q0vB","sources":["../../../packages/user-login/README.md"],"sourcesContent":["export default \"# 登录页面\\n\\n[![npm version](https://img.shields.io/npm/v/@uiw-admin/user-login.svg?label=@uiw-admin/user-login)](https://www.npmjs.com/package/@uiw-admin/user-login)\\n\\n简化项目登录页面，为了多项目登录页面不用重新构建登录页面\\n\\n## 何时使用\\n\\n在不重新构建登录页面的时候使用\\n\\n## 安装\\n\\n```bash\\nnpm i @uiw-admin/user-login --save  # yarn add  @uiw-admin/user-login\\n```\\n\\n## 基本使用\\n\\n`api`：登录请求接口，`onSuccess`：登陆成功后回调\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport UserLogin from '@uiw-admin/user-login';\\nimport { Notify } from \\\"uiw\\\"\\nconst UserLayout = () => {\\n  return (\\n    <UserLogin\\n      api=\\\"/api/login\\\"\\n      onSuccess={(data) => {\\n        if (data && data.token) {\\n          sessionStorage.setItem(\\\"token\\\", data.token)\\n          sessionStorage.setItem(\\\"auth\\\", JSON.stringify(data.authList || []))\\n        } else {\\n         Notify.error({ title: \\\"错误通知\\\", description: data.message || \\\"请求失败\\\" })\\n        }\\n      }}\\n    />\\n  )\\n}\\nReactDOM.render(<UserLayout />, _mount_);\\n\\n```\\n\\n## 添加额外请求参数\\n\\n`onBefore`：登陆前回调，用于添加额外请求参数。如果返回 `false`， 则不进行登录请求操作\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport UserLogin from '@uiw-admin/user-login';\\nimport { Notify } from \\\"uiw\\\"\\nconst UserLayout = () => {\\n  return <UserLogin\\n    api=\\\"/api/login\\\"\\n    onBefore={(value) => ({ a: 12, b: 1221 })}\\n    // onBefore={(value) => false}\\n    onSuccess={(data) => {\\n      if (data && data.token) {\\n        sessionStorage.setItem(\\\"token\\\", data.token)\\n        sessionStorage.setItem(\\\"auth\\\", JSON.stringify(data.authList || []))\\n      } else {\\n        Notify.error({ title: \\\"错误通知\\\", description: data.message || \\\"请求失败\\\" })\\n      }\\n    }}\\n  />\\n}\\nReactDOM.render(<UserLayout />, _mount_);\\n\\n```\\n\\n## 配置接口参数\\n\\n`saveField`：配置登陆参数字段，⚠️ 注意：V6版本中删除当前属性。建议使用`defaultFieldsConfig`属性\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport UserLogin from '@uiw-admin/user-login';\\nimport { useNavigate, } from 'react-router-dom';\\nimport { Notify } from \\\"uiw\\\"\\nconst UserLayout = () => {\\n  return <UserLogin\\n    api=\\\"/api/login\\\"\\n    // 配置登陆参数\\n    saveField={{\\n      userName: \\\"username\\\",\\n      passWord: \\\"password\\\"\\n    }}\\n    onSuccess={(data) => {\\n      if (data && data.token) {\\n        sessionStorage.setItem(\\\"token\\\", data.token)\\n        sessionStorage.setItem(\\\"auth\\\", JSON.stringify(data.authList || []))\\n      } else {\\n        Notify.error({ title: \\\"错误通知\\\", description: data.message || \\\"请求失败\\\" })\\n      }\\n    }}\\n  />\\n}\\nReactDOM.render(<UserLayout />, _mount_);\\n```\\n\\n## 默认输入框属性配置\\n\\n`defaultFieldsConfig`：默认输入框属性配置\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport UserLogin from '@uiw-admin/user-login';\\nimport { useNavigate, } from 'react-router-dom';\\nimport { Notify } from \\\"uiw\\\"\\nconst UserLayout = () => {\\n  return <UserLogin\\n    api=\\\"/api/login\\\"\\n    defaultFieldsConfig={{\\n      userName:{label:\\\"手机号\\\",name:\\\"phone\\\"},\\n      passWord:{label:\\\"密码\\\"},\\n    }}\\n    onSuccess={(data) => {\\n      if (data && data.token) {\\n        sessionStorage.setItem(\\\"token\\\", data.token)\\n        sessionStorage.setItem(\\\"auth\\\", JSON.stringify(data.authList || []))\\n      } else {\\n        Notify.error({ title: \\\"错误通知\\\", description: data.message || \\\"请求失败\\\" })\\n      }\\n    }}\\n  />\\n}\\nReactDOM.render(<UserLayout />, _mount_);\\n```\\n\\n## 默认登录按钮属性配置\\n\\n`btnProps`：默认登录按钮属性配置，自定义的按钮不生效\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport UserLogin from '@uiw-admin/user-login';\\nimport { useNavigate, } from 'react-router-dom';\\nimport { Notify } from \\\"uiw\\\"\\n\\nconst UserLayout = () => {\\n  return <UserLogin\\n    api=\\\"/api/login\\\"\\n    btnProps={{ type: \\\"primary\\\" }}\\n    onSuccess={(data) => {\\n      if (data && data.token) {\\n        sessionStorage.setItem(\\\"token\\\", data.token)\\n        sessionStorage.setItem(\\\"auth\\\", JSON.stringify(data.authList || []))\\n      } else {\\n        Notify.error({ title: \\\"错误通知\\\", description: data.message || \\\"请求失败\\\" })\\n      }\\n    }}\\n  />\\n}\\n// export default UserLayout;\\nReactDOM.render(<UserLayout />, _mount_);\\n```\\n\\n## 自定义form表单项\\n\\n`fields`：可进行自定义form表单项\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport UserLogin from '@uiw-admin/user-login';\\nimport { useNavigate, } from 'react-router-dom';\\nimport { Notify } from \\\"uiw\\\"\\n\\nconst UserLayout = () => {\\n  return <UserLogin\\n   fields={[\\n      {\\n        name: \\\"email\\\",\\n        label: \\\"邮箱\\\",\\n        labelFor: 'email',\\n        children: (\\n          <input\\n            id={\\\"email\\\"}\\n            type=\\\"email\\\"\\n            placeholder={`请输入邮箱`}\\n            className=\\\"form-field\\\"\\n          />\\n        ),\\n      }\\n     ]}\\n    api=\\\"/api/login\\\"\\n    onSuccess={(data) => {\\n      if (data && data.token) {\\n        sessionStorage.setItem(\\\"token\\\", data.token)\\n        sessionStorage.setItem(\\\"auth\\\", JSON.stringify(data.authList || []))\\n      } else {\\n        Notify.error({ title: \\\"错误通知\\\", description: data.message || \\\"请求失败\\\" })\\n      }\\n    }}\\n  />\\n}\\n// export default UserLayout;\\nReactDOM.render(<UserLayout />, _mount_);\\n```\\n\\n## 是否需要默认的输入框渲染\\n\\n`isDefaultFields`：是否需要默认的输入框渲染\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport UserLogin from '@uiw-admin/user-login';\\nimport { useNavigate, } from 'react-router-dom';\\nimport { Notify } from \\\"uiw\\\"\\n\\nconst UserLayout = () => {\\n  return <UserLogin\\n   fields={[\\n      {\\n        name: \\\"email\\\",\\n        label: \\\"邮箱\\\",\\n        labelFor: 'email',\\n        children: (\\n          <input\\n            id={\\\"email\\\"}\\n            type=\\\"email\\\"\\n            placeholder={`请输入邮箱`}\\n            className=\\\"form-field\\\"\\n          />\\n        ),\\n      }\\n     ]}\\n    isDefaultFields={false}\\n    api=\\\"/api/login\\\"\\n    onSuccess={(data) => {\\n      if (data && data.token) {\\n        sessionStorage.setItem(\\\"token\\\", data.token)\\n        sessionStorage.setItem(\\\"auth\\\", JSON.stringify(data.authList || []))\\n      } else {\\n        Notify.error({ title: \\\"错误通知\\\", description: data.message || \\\"请求失败\\\" })\\n      }\\n    }}\\n  />\\n}\\n// export default UserLayout;\\nReactDOM.render(<UserLayout />, _mount_);\\n```\\n\\n## 使用配置渲染操作按钮\\n\\n`buttons`：可进行自定义按钮配置,从而做更多业务拓展(如注册等)\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport UserLogin from '@uiw-admin/user-login';\\nimport { useNavigate, } from 'react-router-dom';\\nimport { Notify } from \\\"uiw\\\"\\n\\nconst UserLayout = () => {\\n  return <UserLogin\\n   buttons={[\\n       {\\n         title: \\\"登录\\\",\\n         htmlType: \\\"submit\\\",\\n       },\\n       {\\n         title: \\\"注册\\\",\\n       },\\n     ]}\\n    api=\\\"/api/login\\\"\\n    onSuccess={(data) => {\\n      if (data && data.token) {\\n        sessionStorage.setItem(\\\"token\\\", data.token)\\n        sessionStorage.setItem(\\\"auth\\\", JSON.stringify(data.authList || []))\\n      } else {\\n        Notify.error({ title: \\\"错误通知\\\", description: data.message || \\\"请求失败\\\" })\\n      }\\n    }}\\n  />\\n}\\n// export default UserLayout;\\nReactDOM.render(<UserLayout />, _mount_);\\n```\\n\\n## 自定义背景样式\\n\\n`styleContainer`：自定义背景样式 ，`bg`：可直接修改背景图片\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport UserLogin from '@uiw-admin/user-login';\\nimport { useNavigate, } from 'react-router-dom';\\nimport { Notify } from \\\"uiw\\\"\\n\\nconst UserLayout = () => {\\n  return <UserLogin\\n    styleContainer={{\\n      background:\\\"url(https://gimg2.baidu.com/image_search/src=http%3A%2F%2Ffile05.16sucai.com%2F2015%2F0615%2F0f9320e353671b9b02049dec80a7fde3.jpg&refer=http%3A%2F%2Ffile05.16sucai.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1648782265&t=8e140f1c56df1f31366698c0d695f36f)\\\",\\n    }}\\n    api=\\\"/api/login\\\"\\n    onSuccess={(data) => {\\n      if (data && data.token) {\\n        sessionStorage.setItem(\\\"token\\\", data.token)\\n        sessionStorage.setItem(\\\"auth\\\", JSON.stringify(data.authList || []))\\n      } else {\\n        Notify.error({ title: \\\"错误通知\\\", description: data.message || \\\"请求失败\\\" })\\n      }\\n    }}\\n  />\\n}\\n// export default UserLayout;\\nReactDOM.render(<UserLayout />, _mount_);\\n```\\n\\n## 自定义背景图片\\n\\n`bg`：可直接修改背景图片，⚠️ 注意：V6版本中删除当前属性。建议使用`styleContainer`\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport UserLogin from '@uiw-admin/user-login';\\nimport { useNavigate, } from 'react-router-dom';\\nimport { Notify } from \\\"uiw\\\"\\n\\nconst UserLayout = () => {\\n  return <UserLogin\\n      bg=\\\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fi-1-lanrentuku.qqxzb-img.com%2F2020%2F11%2F11%2Fef6f5575-ee2f-4113-b471-b8f0becf98c3.jpg%3FimageView2%2F2%2Fw%2F1024&refer=http%3A%2F%2Fi-1-lanrentuku.qqxzb-img.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1648782888&t=33ace74f48bd36f363b577158171abd1\\\"\\n    api=\\\"/api/login\\\"\\n    onSuccess={(data) => {\\n      if (data && data.token) {\\n        sessionStorage.setItem(\\\"token\\\", data.token)\\n        sessionStorage.setItem(\\\"auth\\\", JSON.stringify(data.authList || []))\\n      } else {\\n        Notify.error({ title: \\\"错误通知\\\", description: data.message || \\\"请求失败\\\" })\\n      }\\n    }}\\n  />\\n}\\n// export default UserLayout;\\nReactDOM.render(<UserLayout />, _mount_);\\n```\\n\\n## 自定义项目名称\\n\\n`projectName`：自定义项目名称\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport UserLogin from '@uiw-admin/user-login';\\nimport { useNavigate, } from 'react-router-dom';\\nimport { Notify } from \\\"uiw\\\"\\n\\nconst UserLayout = () => {\\n  return <UserLogin\\n    projectName=\\\"项目名称\\\"\\n    api=\\\"/api/login\\\"\\n    onSuccess={(data) => {\\n      if (data && data.token) {\\n        sessionStorage.setItem(\\\"token\\\", data.token)\\n        sessionStorage.setItem(\\\"auth\\\", JSON.stringify(data.authList || []))\\n      } else {\\n        Notify.error({ title: \\\"错误通知\\\", description: data.message || \\\"请求失败\\\" })\\n      }\\n    }}\\n  />\\n}\\n// export default UserLayout;\\nReactDOM.render(<UserLayout />, _mount_);\\n```\\n\\n\\n## 重写登录框渲染\\n\\n`children`：登录框进行重写\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport UserLogin from '@uiw-admin/user-login';\\nimport { useNavigate, } from 'react-router-dom';\\nimport { Notify } from \\\"uiw\\\"\\nimport { Form, Row, Col,Button } from 'uiw';\\nconst UserLayout = () => {\\n  return <UserLogin>\\n  <Form\\n      resetOnSubmit={false}\\n      onSubmit={({ current }) => {\\n        const errorObj = {};\\n        if (!current.username) errorObj.username = `账号不能为空！`;\\n        if (!current.password) errorObj.password = `密码不能为空！`;\\n        if (Object.keys(errorObj).length > 0) {\\n          const err = new Error();\\n          err.filed = errorObj;\\n          throw err;\\n        } else {\\n          setStore({ ...current});\\n        }\\n      }}\\n      onSubmitError={(error) => {\\n        if (error.filed) {\\n          return { ...error.filed };\\n        }\\n        return null;\\n      }}\\n      fields={{\\n        username: {\\n          label: `账号`,\\n          labelFor: 'username',\\n          children: (\\n            <input\\n              type=\\\"text\\\"\\n              id=\\\"username\\\"\\n              placeholder={`请输入账号`}\\n              className=\\\"form-field\\\"\\n            />\\n          ),\\n        },\\n        password: {\\n          label: `密码`,\\n          labelFor: 'password',\\n          children: (\\n            <input\\n              id=\\\"password\\\"\\n              type=\\\"password\\\"\\n              placeholder={`请输入密码`}\\n              className=\\\"form-field\\\"\\n            />\\n          ),\\n        },\\n      }}\\n    >\\n      {({ fields, canSubmit}) => {\\n        return (\\n          <div>\\n            <Row>\\n              <Col style={{ color: '#555' }}>{fields.username}</Col>\\n            </Row>\\n            <Row>\\n              <Col style={{ color: '#555' }}>{fields.password}</Col>\\n            </Row>\\n            <Row>\\n                <Button\\n                  disabled={!canSubmit()}\\n                  className=\\\"btns\\\"\\n                  block\\n                  style={{ marginTop: 20 }}\\n                  htmlType=\\\"submit\\\"\\n                  type=\\\"dark\\\"\\n                >\\n                  登录\\n                </Button>\\n            </Row>\\n          </div>\\n        );\\n      }}\\n    </Form>\\n  \\n  </UserLogin>\\n}\\n// export default UserLayout;\\nReactDOM.render(<UserLayout />, _mount_);\\n```\\n\\n<!-- ## 参数\\n\\n```ts\\n\\ntype FormValue = { username?: string, password?: string }\\n\\nexport interface UserLoginProps {\\n  /** 卡片框的位置 */\\n  align?: 'left' | 'right' | 'center';\\n  classNameWarp?: string;\\n  styleWarp?: React.CSSProperties;\\n  /** 卡片的 className */\\n  classNameBody?: string;\\n  /** 卡片的 style */\\n  styleBody?: React.CSSProperties;\\n  /** 页脚 */\\n  footer?: React.ReactNode;\\n  /** 背景图片 */\\n  bg?: string;\\n  /** 如果存在 children 则 覆盖默认登录框里面内容  */ \\n  children?: React.ReactNode;\\n  /** 项目名称 */\\n  projectName?: string;\\n  /** 登录接口返回 */\\n  onSuccess?: (resp: any, form: FormValue | undefined) => void;\\n  /** 登录按钮 属性 */\\n  btnProps?: Omit<ButtonProps, \\\"ref\\\">;\\n  /** 请求接口 */\\n  api?: string;\\n  /** 调用接口之前 , 可以通过这个添加额外参数  返回 false 则不进行登录操作  */\\n  onBefore?: (store: FormValue) => { [s: string]: any } | boolean;\\n  /** request 请求的 options 配置参数 */\\n  requestConfig?: Options;\\n    /** 登录按钮位置 按钮组, title 为显示标题 */\\n  buttons?: (Omit<ButtonProps, 'ref'> & { title?: React.ReactNode })[]\\n   /** 默认输入框保存字段  */\\n  saveField?: {\\n    /** 登录账号 默认值 username*/\\n    userName?: string,\\n    /** 密码 默认值 password */\\n    passWord?: string\\n  }\\n}\\n``` -->\\n\\n## 参数说明\\n\\n| 参数                | 必填 | 类型                                                                                      | 默认值                                      | 说明                                                               |\\n| ------------------- | ---- | ----------------------------------------------------------------------------------------- | ------------------------------------------- | ------------------------------------------------------------------ |\\n| api                 | 是   | `string`                                                                                  |                                             | 请求接口                                                           |\\n| align               | 否   | `枚举类型：'left' \\\\| 'right' \\\\| 'center'`                                                 | `center`                                    | 卡片框的位置                                                       |\\n| footer              | 否   | `React.ReactNode`                                                                         |          `true`                                   | 页脚                                                               |\\n| bg                  | 否   | `string`                                                                                  |                                             | 页面背景图，可以`require('./image.png')`或者是图片链接             |\\n| logo                | 否   | `string \\\\|''`                                                                             |                                             | logo头像, 值为`null` 不显示logo                                    |\\n| children            | 否   | `React.ReactNode`                                                                         |                                             | 替换卡片位置内容                                                   |\\n| projectName         | 否   | `string\\\\|null`                                                                            | `UIW Admin`                                 | 项目名称(页面标题)  如果值为`null`  不显示标题                     |\\n| btnProps            | 否   | `Omit<ButtonProps, 'ref'>`                                                                | `{}`                                        | 登录按钮 属性                                                      |\\n| buttons             | 否   | `(Omit<ButtonProps, 'ref'> & { title?: React.ReactNode })[]`                              |                                             | 登录按钮位置的自定义按钮组, title 为显示标题                       |\\n| onSuccess           | 是   | `(resp: any, form: (FormValue \\\\| undefined)) => void`                                     | `()=>null`                                  | 登录接口返回                                                       |\\n| onBefore            | 否   | `(store: FormValue) => (Record<string, any> \\\\| boolean)`                                  |                                             | 用接口之前 , 可以通过这个添加额外参数  返回 false 则不进行登录操作 |\\n| requestConfig       | 否   | `Options`                                                                                 |                                             | `request` 请求 `options` 配置参数                                  |\\n| saveField           | 否   | `{userName(登录账号字段)?:string,passWord(密码字段)?:string}`                             | `{userName:\\\"username\\\",passWord:\\\"password\\\"}` | 默认输入框保存字段                                                 |\\n| defaultFieldsConfig | 否   | `{userName(账户输入框)?:Partial<FieldsProps>,passWord(密码输入框)?:Partial<FieldsProps>}` |                                             | 默认输入框保存字段                                                 |\\n| fields              | 否   | `FieldsProps[]`                                                                           |                                             | 自定义form表单项                                                   |\\n| isDefaultFields     | 否   | `boolean`                                                                                 | `true`                                      | 是否需要默认的输入框渲染                                           |\\n| classNameWarp       | 否   | `string`                                                                                  |                                             | 卡片框外层`className`                                              |\\n| styleWarp           | 否   | `React.CSSProperties`                                                                     |                                             | 卡片框外层`style`                                                  |\\n| classNameBody       | 否   | `string`                                                                                  |                                             | 卡片框`className`                                                  | — |\\n| styleBody           | 否   | `React.CSSProperties`                                                                     |                                             | 卡片框`style`                                                      |\\n| styleContainer      | 否   | `React.CSSProperties`                                                                     |                                             | 背景框`style` 可再次调整背景图样式                                 |\\n\\n```tsx\\nexport interface FieldsProps<T = any> extends FormFieldsProps<T> {\\n  /** 保存字段 */ \\n  name: string;\\n  // 验证输入框值   value:输入框的值，current：当前表单的值，返回值为 string 类型时，进行报错提示\\n  verification?: (value: any, current: Record<string, any>) => string | boolean | null,\\n}\\n```\\n\\n## 贡献者\\n\\n感谢所有的贡献者，欢迎开发者为开源项目贡献力量。\\n\\n<a href=\\\"https://github.com/uiwjs/uiw-admin/graphs/contributors\\\">\\n  <img src=\\\"https://uiwjs.github.io/uiw-admin/CONTRIBUTORS.svg\\\" />\\n</a>\\n\\n## License\\n\\nLicensed under the MIT License.\\n\";"],"names":[],"sourceRoot":""}